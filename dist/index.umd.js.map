{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/** Specifies characteristics about the listener. */\r\ninterface EventHandlerOptions<T extends { [key: string]: any } = { [key: string]: any }> {\r\n  /**\r\n   * A Boolean indicating that the listener should be invoked at most once after being added.\r\n   * If true, the listener would be automatically removed when invoked.\r\n   */\r\n  once?: boolean\r\n\r\n  /**\r\n   * A Boolean indicating that it should wait for listener processing.\r\n   * If true, the next listener will not be executed until the listener processing is completed.\r\n   */\r\n  wait?: boolean\r\n\r\n  /**\r\n   * An object to be passed as an argument of the listener.\r\n   */\r\n  data?: T\r\n}\r\n\r\n/** Argument object that the listener receives. */\r\nexport type EventHandlerListenerEvent<T extends { [key: string]: any } = {}, U extends string = string, V extends EventHandler = EventHandler> = {\r\n  /** This represents the name of the event. */\r\n  type: U\r\n\r\n  /** This represents the class that received the event. */\r\n  target: V\r\n\r\n  /**\r\n   * This is the initial value for options passed to the event.\r\n   * When passed, it may be overwritten.\r\n   */\r\n  data: T\r\n}\r\n\r\n/** This represents a listener. */\r\nexport type EventHandlerListener<T extends { [key: string]: any } = {}, U extends string = string, V extends EventHandler = EventHandler> =\r\n  (ev: EventHandlerListenerEvent<T, U, V>) => void | Promise<void>\r\n\r\n/** This represents the data map when it was dispatched. */\r\nexport type EventHandlerDataMap = {\r\n  [key: string]: { [key: string]: any }\r\n}\r\n\r\nclass EventHandler<M extends EventHandlerDataMap = EventHandlerDataMap> {\r\n  private readonly _map: Map<string, { listener: EventHandlerListener<any, any, any>, options: EventHandlerOptions }[]> = new Map()\r\n\r\n  /**\r\n   * Add a new listener.\r\n   * @param type This represents the name of the event.\r\n   * @param listener This represents the listener to add.\r\n   * @param options Specifies characteristics about the event listener.\r\n   */\r\n  addEventListener<T extends Extract<keyof M, string>, U extends Partial<M[T]> = M[T], V extends this = this> (\r\n    type: T,\r\n    listener: EventHandlerListener<M[T] & U, T, V>,\r\n    options: EventHandlerOptions<U> = {}\r\n  ) {\r\n    let onMaps = this._map.get(type)\r\n    if (!onMaps) {\r\n      onMaps = []\r\n      this._map.set(type, onMaps)\r\n    }\r\n\r\n    let isAdd = true\r\n\r\n    for (const onMap of onMaps) {\r\n      if (onMap.listener === listener) {\r\n        onMap.options = options\r\n        isAdd = false\r\n        break\r\n      }\r\n    }\r\n\r\n    if (isAdd) { onMaps.push({ listener, options }) }\r\n\r\n    return isAdd\r\n  }\r\n\r\n  /**\r\n   * Remove the listener.\r\n   * @param type This represents the name of the event.\r\n   * @param listener This represents the listener to remove.\r\n   */\r\n  removeEventListener (type: Extract<keyof M, string>, listener: EventHandlerListener) {\r\n    const onMaps = this._map.get(type)\r\n    if (onMaps) {\r\n      let index = 0\r\n      for (const onMap of onMaps) {\r\n        if (onMap.listener === listener) {\r\n          onMaps.splice(index, 1)\r\n          return true\r\n        }\r\n\r\n        index++\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Execute the registered event.\r\n   * @param type This represents the name of the event.\r\n   * @param data An object to be passed as an argument of the listener.\r\n   */\r\n  async dispatchEvent<T extends Extract<keyof M, string>> (type: T, data: M[T] = {} as M[T]) {\r\n    const promises: (Promise<void> | void)[] = []\r\n\r\n    const onMaps = this._map.get(type)\r\n    if (onMaps) {\r\n      for (const { listener, options } of [...onMaps]) {\r\n        const event = {\r\n          type,\r\n          target: this,\r\n          data: { ...(options.data || {}), ...data }\r\n        }\r\n\r\n        const promise = listener(event)\r\n        promises.push(promise)\r\n\r\n        if (options.once) { this.removeEventListener(type, listener) }\r\n        if (options.wait) { await promise }\r\n      }\r\n    }\r\n\r\n    await Promise.all(promises)\r\n  }\r\n}\r\n\r\nexport default EventHandler\r\n"],"names":[],"mappings":";;;;;;IA4CA,MAAM,YAAY;QAAlB;YACmB,SAAI,GAAmG,IAAI,GAAG,EAAE,CAAA;SAmFlI;;;;;;;QA3EC,gBAAgB,CACd,IAAO,EACP,QAA8C,EAC9C,UAAkC,EAAE;YAEpC,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAChC,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,GAAG,EAAE,CAAA;gBACX,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;aAC5B;YAED,IAAI,KAAK,GAAG,IAAI,CAAA;YAEhB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC1B,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;oBAC/B,KAAK,CAAC,OAAO,GAAG,OAAO,CAAA;oBACvB,KAAK,GAAG,KAAK,CAAA;oBACb,MAAK;iBACN;aACF;YAED,IAAI,KAAK,EAAE;gBAAE,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAA;aAAE;YAEjD,OAAO,KAAK,CAAA;SACb;;;;;;QAOD,mBAAmB,CAAE,IAA8B,EAAE,QAA8B;YACjF,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAClC,IAAI,MAAM,EAAE;gBACV,IAAI,KAAK,GAAG,CAAC,CAAA;gBACb,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;oBAC1B,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;wBAC/B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;wBACvB,OAAO,IAAI,CAAA;qBACZ;oBAED,KAAK,EAAE,CAAA;iBACR;aACF;YAED,OAAO,KAAK,CAAA;SACb;;;;;;QAOD,MAAM,aAAa,CAAsC,IAAO,EAAE,OAAa,EAAU;YACvF,MAAM,QAAQ,GAA6B,EAAE,CAAA;YAE7C,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAClC,IAAI,MAAM,EAAE;gBACV,KAAK,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,EAAE;oBAC/C,MAAM,KAAK,GAAG;wBACZ,IAAI;wBACJ,MAAM,EAAE,IAAI;wBACZ,IAAI,EAAE,EAAE,IAAI,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE;qBAC3C,CAAA;oBAED,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;oBAC/B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;oBAEtB,IAAI,OAAO,CAAC,IAAI,EAAE;wBAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;qBAAE;oBAC9D,IAAI,OAAO,CAAC,IAAI,EAAE;wBAAE,MAAM,OAAO,CAAA;qBAAE;iBACpC;aACF;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SAC5B;;;;;;;;;"}